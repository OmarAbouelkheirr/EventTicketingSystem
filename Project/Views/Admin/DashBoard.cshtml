<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Admin Dashboard</title>
        <!-- Bootstrap CSS -->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
        <!-- Font Awesome -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

        <!-- html5-qrcode library -->
        <script src="https://unpkg.com/html5-qrcode" type="text/javascript"></script>
        <script>
            console.log(Html5QrcodeScanner);
            </script>
        <style>
            body {
                background-color: #f8f9fa;
            }
            .sidebar {
                height: 100vh;
                background: linear-gradient(to bottom right, #0c1427, #0c1427);
                color: white;
            }
            .sidebar a {
                color: white;
                text-decoration: none;
                margin-bottom: 10px;
                display: flex;
                align-items: center;
            }
            .sidebar a i {
                margin-right: 10px;
            }
            .sidebar a:hover {
                text-decoration: none;
            }
            .stat-card {
                border: none;
                border-radius: 10px;
                box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            }
            .stat-icon {
                width: 40px;
                height: 40px;
                background-color: #ec4899;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
            }
            .btn-pink {
                background-color: #ec4899;
                color: white;
            }
            .btn-pink:hover {
                background-color: #d03682;
            }
            .dropdown-toggle::after {
                display: none !important;
            }
            .status-pending {
                color: #ffc107;
                font-weight: bold;
            }
            .status-published {
                color: #28a745;
                font-weight: bold;
            }
            .status-rejected {
                color: #dc3545;
                font-weight: bold;
            }
            .user-type-organizer {
                color: #ec4899;
                font-weight: bold;
            }
            .user-type-regular {
                color: #17a2b8;
                font-weight: bold;
            }
        </style>
    </head>
    <body>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <div class="col-md-2 sidebar d-flex flex-column p-3">
                <a class="navbar-brand h4 fw-bold d-flex align-items-center mb-4" href="#">
                    <i class="fas fa-tv text-white"></i> <span class="ms-2">EventHub Admin</span>
                </a>
                <a href="#" onclick="showSection('dashboard')"><i class="fas fa-chart-line"></i> Dashboard</a>
                <a href="#" onclick="toggleDropdown('usersDropdown')"><i class="fas fa-users"></i> User Management <i class="fas fa-chevron-down ms-auto"></i></a>
                <ul id="usersDropdown" class="list-unstyled ps-4 d-none">
                    <li><a href="#" onclick="showSection('allUsers')"><i class="fas fa-list"></i> All Users</a></li>
                </ul>
                <a href="#" onclick="toggleDropdown('categoriesDropdown')"><i class="fas fa-tags"></i> Categories <i class="fas fa-chevron-down ms-auto"></i></a>
                <ul id="categoriesDropdown" class="list-unstyled ps-4 d-none">
                    <li><a href="#" onclick="showSection('viewCategories')"><i class="fas fa-list"></i> View Categories</a></li>
                    <li><a href="#" onclick="showSection('addCategory')"><i class="fas fa-plus-circle"></i> Add Category</a></li>
                </ul>
                <a href="#" onclick="toggleDropdown('eventsDropdown')"><i class="fas fa-calendar"></i> Events <i class="fas fa-chevron-down ms-auto"></i></a>
                <ul id="eventsDropdown" class="list-unstyled ps-4 d-none">
                    <li><a href="#" onclick="showSection('allEvents')"><i class="fas fa-list"></i> All Events</a></li>
                </ul>
                <a href="#" onclick="toggleDropdown('ticketsDropdown')"><i class="fas fa-ticket-alt"></i> Tickets <i class="fas fa-chevron-down ms-auto"></i></a>
                <ul id="ticketsDropdown" class="list-unstyled ps-4 d-none">
                    <li><a href="#" onclick="showSection('allTickets')"><i class="fas fa-list"></i> All Tickets</a></li>
                </ul>
                <a asp-controller="Account" asp-action="HomePage"><i class="fas fa-home"></i> Back to Home</a>
            </div>

            <!-- Main content -->
            <div class="col-md-10 p-4">
                <!-- Profile Dropdown -->
                <div class="d-flex justify-content-end align-items-center mb-3">
                    <form action="/Account/logout" method="post" class="d-inline">
                        <button type="submit" class="btn btn-outline-danger rounded-pill px-4">
                            <i class="bi bi-box-arrow-right me-2"></i>Logout
                        </button>
                    </form>
                </div>

                <h3>Admin Dashboard</h3>

                <!-- Dashboard Stats -->
                <div id="dashboard-section" class="mt-4">
                    <div class="row g-3">
                        <div class="col-md-3">
                            <div class="card stat-card p-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h5>Total Users</h5>
                                        <h3 id="total-users">loading</h3>
                                    </div>
                                    <div class="stat-icon">
                                        <i class="fas fa-users"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card stat-card p-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h5>Organizers</h5>
                                        <h3 id="total-organisers">loading</h3>
                                    </div>
                                    <div class="stat-icon">
                                        <i class="fas fa-user-tie"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card stat-card p-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h5>Events</h5>
                                        <h3 id="total-events">loading</h3>
                                    </div>
                                    <div class="stat-icon">
                                        <i class="fas fa-calendar"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card stat-card p-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h5>Tickets Sold</h5>
                                        <h3 id="total-tickets">loading</h3>
                                    </div>
                                    <div class="stat-icon">
                                        <i class="fas fa-ticket-alt"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                </div>

                <!-- All Users Section -->
                <div id="allUsers-section" class="mt-5" style="display: none;">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4>User Management</h4>
                        <div>
                            <button class="btn btn-pink me-2" data-bs-toggle="modal" data-bs-target="#addAdminModal">+ Add Admin</button>
                            <button class="btn btn-secondary me-2" data-bs-toggle="modal" data-bs-target="#addUserModal">+ Add User</button>
                            <button class="btn btn-info text-white" data-bs-toggle="modal" data-bs-target="#addOrganizerModal">+ Add Organizer</button>
                        </div>
                        <div class="input-group" style="width: 300px;">
                            <input type="text" class="form-control" id="searchPersonName" placeholder="Search users...">
                            <button class="btn btn-pink" id="searchPersonNameBtn" type="button"><i class="fas fa-search"></i></button>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered align-middle">
                            <thead style="color: white; background-color:rgb(99, 98, 98);">
                            <tr>
                                <th>#</th>
                                <th>Name</th>
                                <th>User Type</th>
                                <th>Email</th>
                                <th>Registration Date</th>
                                <th>Actions</th>
                            </tr>
                            </thead>
                            <tbody id="user-table-body">
                          <tr>
                              <td colspan="8" class="text-center">
                                <div class="loading-container">
                                    <div class="loader"></div>
                                </div>
                            </tbody>
                        </table>
                    </div>
                    <nav aria-label="Page navigation">
                        <ul id="pagination" class="pagination justify-content-center">
                            <li class="page-item disabled">
                                <a class="page-link" href="#" onclick="FetchPreviousUsers()" tabindex="-1">Previous</a>
                            </li>
                            <li class="page-item active"><a class="page-link" href="#">1</a></li>
                            <li class="page-item"><a class="page-link" href="#">2</a></li>
                            <li class="page-item"><a class="page-link" href="#">3</a></li>
                            <li class="page-item">
                                <a class="page-link" href="#" onclick="FetchNextUsers()">Next</a>
                            </li>
                        </ul>
                    </nav>
                </div>

                <!-- View Categories Section -->
                <div id="viewCategories-section" class="mt-5" style="display: none;">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4>Categories</h4>
                        <div>
                            <a href="#" onclick="showSection('addCategory')" class="btn btn-pink">+ Add Category</a>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered align-middle">
                            <thead style="color: white; background-color:rgb(99, 98, 98);">
                            <tr>
                                <th>ID</th>
                                <th>Category Name</th>
                                <th>Number of Events</th>
                                <th>Actions</th>
                            </tr>
                            </thead>
                            <tbody id="categories-table-body">
@*                             <tr>
                                <td>3</td>
                                <td>Sports Events</td>
                                <td>65</td>
                                <td>
                                    <a href="c:\Users\DELL\OneDrive\سطح المكتب\TASK\viewcategory2.html" class="btn btn-primary btn-sm"><i class="fas fa-eye"></i> View</a>
                                    <button class="btn btn-secondary btn-sm"><i class="fas fa-edit"></i> Edit</button>
                                    <button class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="#deleteCategoryModal" onclick="setDeleteCategoryId(3)">
                                        <i class="fas fa-trash-alt"></i> Delete
                                    </button>
                                </td>
                            </tr> *@
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Add Category Section -->
                <div id="addCategory-section" style="display: none;">
                    <div class="form-container bg-white p-4 rounded shadow">
                        <h2 class="text-center text-danger mb-4">Add New Category</h2>
                        <form id="categoryForm">
                            <div class="mb-3">
                                <label class="form-label">Category Name</label>
                                <input type="text" class="form-control" id="categoryName" placeholder="Enter category name" required>
                                <div class="invalid-feedback" id="categoryNameFeedback">
                                    Category name already exists!
                                </div>
                            </div>
                            <div class="text-center">
                                <button id="add-category-button"  class="btn btn-pink px-4">ADD CATEGORY</button>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- All Events Section -->
                <div id="allEvents-section" class="mt-5" style="display: none;">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4>All Events</h4>
                        <div class="input-group" style="width: 300px;">
                            <input type="text" id="searchEvents" class="form-control" placeholder="Search events...">
                            <button class="btn btn-pink" id="searchEventsBtn" type="button"><i class="fas fa-search"></i></button>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered align-middle">
                            <thead style="color: white; background-color:rgb(99, 98, 98);">
                            <tr>
                                <th>#</th>
                                <th>Event Name</th>
                                <th>Organizer</th>
                                <th>Category</th>
                                <th>Date</th>
                                <th>Actions</th>
                            </tr>
                            </thead>
                            <tbody id="events-table-body">
  
                            <tr>
                                    <td colspan="7" style="text-align: center;">Loading...</td>
                            </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Pending Events Section -->
                <div id="pendingEvents-section" class="mt-5" style="display: none;">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4>Events Pending Review</h4>
                        <div class="input-group" style="width: 300px;">
                            <input type="text" class="form-control" placeholder="Search events...">
                            <button class="btn btn-pink" type="button"><i class="fas fa-search"></i></button>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered align-middle">
                            <thead style="color: white; background-color:rgb(99, 98, 98);">
                            <tr>
                                    <th>Event ID</th>
                                <th>Event Name</th>
                                <th>Organizer</th>
                                <th>Category</th>
                                <th>Date</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                            </thead>
                            <tbody id="events-table-body">
                                <tr>
                            <td colspan="7" style="text-align: center;">
                                <span id="loading-text">Loading... Please wait <i class="fas fa-spinner fa-spin"></i></span>
                            </td>

                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- All Tickets Section -->
                <div id="allTickets-section" class="mt-5" style="display: none;">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4>All Ticket Bookings</h4>

                    </div>
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered align-middle">
                            <thead style="color: white; background-color:rgb(99, 98, 98);">
                            <tr>
                                <th>Tikcket ID</th>
                                <th>Attendee Name</th>
                                <th>Email</th>
                                <th>Ticket ID</th>
                                <th>Event Name</th>
                                <th>Booking Date</th>
                                <th>Status</th>
                                <th>Action</th>
                            </tr>
                            </thead>
                            <tbody id="tickets-table-body">

                            <tr>
                                    <td colspan="8" class="text-center">
                                        <div class="loading-container">
                                            <div class="loader"></div>
                                        </div>
                                    </td>
                            </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Scripts -->
    <script>
        // Global variables to store IDs for deletion
        DashBoard_Data();
        let currentPage = 1;
        let pageLimit = 3;
        let totalPages = 1;

        async function getEventCategories() {
            try {
                const response = await fetch(`/Api/Admin/Categories`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const categories = await response.json();

                const tableBody = document.getElementById("categories-table-body")
                tableBody.innerHTML = ``;

                console.log(categories);
                const values = categories;
                for (const i in values) {
                    const row = document.createElement("tr");
                    row.innerHTML = `<tr>
                        <td>${values[i].categoryID}</td>
                        <td>${values[i].categoryName}</td>
                        <td>${values[i].count == 0 ? 'no events' : values[i].count}</td>
                        <td>
                            <button class="btn btn-danger btn-sm" onclick="confirmDeleteCategory('${values[i].categoryID}')">
                                <i class="fas fa-trash-alt"></i> Delete
                            </button>
                        </td>
                    </tr>`;
                    tableBody.appendChild(row);
                }

            } catch (error) {
                console.error('There was a problem fetching categories:', error);
            }
        }

        async function FetchNextUsers() {
            if (currentPage >= totalPages)
                return;
            return await fetchUsers(++currentPage);
        }
        async function FetchPreviousUsers() {
            if (currentPage <= 1)
                return;
            return await fetchUsers(--currentPage)
        }

        async function fetchUsers(page = currentPage, limit = pageLimit) {
            const tableBody = document.getElementById('tickets-table-body');
            tableBody.innerHTML = `
                <tr>
                    <td colspan="8" class="text-center">
                        <div class="loading-container">
                            <div class="loader"></div>
                        </div>
                    </td>
                </tr>
            `;
            try {
                const response = await fetch(`/Api/Admin/users?page=${page}&pageSize=${limit}`);

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                currentPage = page;
                const data = await response.json();
                console.log('Fetched Users:', data);

                displayUsers(data);
                renderPagination(totalPages, currentPage);
            } catch (error) {
                console.error('Error fetching tickets:', error);
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="8" class="text-center text-danger">
                            Failed to load tickets. Please try again later.
                        </td>
                    </tr>
                `;
                // Clear pagination on error
                document.getElementById('pagination').innerHTML = '';
            }
        }

        function displayUsers(users) {
            const userTableBody = document.getElementById('user-table-body');
            userTableBody.innerHTML = '';  // Clear the existing rows

            users.forEach(user => {
                const row = document.createElement('tr');

                // Create table cells for each user property
                const idCell = document.createElement('td');
                const fnameCell = document.createElement('td');
                const lnameCell = document.createElement('td');
                const emailCell = document.createElement('td');
                const roleCell = document.createElement('td');
                const removeCell = document.createElement('td');

                // Set the text content for each cell
                idCell.textContent = user.personID;
                fnameCell.textContent = user.fName;
                lnameCell.textContent = user.lName;
                emailCell.textContent = user.email;
                roleCell.textContent = user.role;
                removeCell.innerHTML = `<td>
                    <button class="btn btn-danger btn-sm" onclick="confirmDeleteUser(${user.personID})">
                        <i class="fas fa-trash-alt"></i> Delete
                    </button>
                </td>`
                // Append the cells to the row
                row.appendChild(idCell);
                row.appendChild(fnameCell);
                row.appendChild(lnameCell);
                row.appendChild(emailCell);
                row.appendChild(roleCell);
                row.appendChild(removeCell);

                // Append the row to the table body
                userTableBody.appendChild(row);
            });
        }

        document.getElementById('searchPersonNameBtn').addEventListener('click', async function () {
            const filter = document.getElementById('searchPersonName').value.toLowerCase();

            await fetchUsers(1, pageLimit * totalPages)

            const rows = document.querySelectorAll('#user-table-body tr');
            rows.forEach(row => {
                const name = row.cells[1].textContent.toLowerCase();
                row.style.display = name.includes(filter) ? '' : 'none';
            });
        });

        async function getTickets() {
            const tableBody = document.getElementById("tickets-table-body");
            tableBody.innerHTML = `Loading...`;
            try {
                const response = await fetch('/Api/Admin/Tickets');
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const tickets = await response.json();

                tableBody.innerHTML = ``;
                console.log(tickets);
                let x = 1;
                for (const i in tickets) {
                    const row = document.createElement("tr");
                    row.innerHTML = `<tr>
                        <td>${+i + 1}</td>
                        <td>?????????</td>
                        <td>?????????</td>
                        <td>${tickets[i].ticketID}</td>
                        <td>${tickets[i].eventName}</td>
                        <td>${tickets[i].bookingDate}</td>
                        <td>${tickets[i].ticketStatus}</td>
                        <td>
                            <button class="btn btn-danger btn-sm" onclick="confirmDeleteTicket(1)">
                                <i class="fas fa-trash-alt"></i> Delete
                            </button>
                        </td>
                    </tr>`
                    tableBody.appendChild(row);
                }

            } catch (error) {
                console.error('There was a problem fetching tickets:', error);
            }
        }

        async function DashBoard_Data() {
            return fetch('/Api/Admin/statistics')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Statistics:', data);
                    // You can now access the statistics
                    const totalUsers = data.totalUsers;
                    const totalEvents = data.totalEvents;
                    const totalTickets = data.totalTickets;
                    const totalOrganisers = data.totalOrganisers;

                    totalPages = Math.ceil(totalUsers / pageLimit);

                    // Update the UI with the fetched data
                    document.getElementById('total-users').innerText = totalUsers;
                    document.getElementById('total-events').innerText = totalEvents;
                    document.getElementById('total-organisers').innerText = totalOrganisers;
                    document.getElementById('total-tickets').innerText = totalTickets;
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                });
        }

        document.getElementById("add-category-button").addEventListener("click", async function (e) {
            e.preventDefault();
            const categoryName = document.getElementById("categoryName").value.trim();

            if (!categoryName) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Missing Category Name',
                    text: 'Please enter a category name.'
                });
                return;
            }

            try {
                // Step 1: Fetch existing categories
                const getResponse = await fetch('/Api/Admin/categories');
                const categories = await getResponse.json();

                // Step 2: Check if category already exists
                const exists = categories.some(cat =>
                    cat.categoryName.toLowerCase() === categoryName.toLowerCase()
                );

                if (exists) {
                    document.getElementById("categoryNameFeedback").style.display = 'block';
                    return;
                } else {
                    document.getElementById("categoryNameFeedback").style.display = 'none';
                }

                // Step 3: Create the new category
                const categoryDto = { categoryName };

                const postResponse = await fetch('/Api/Admin/categories', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(categoryDto)
                });

                if (!postResponse.ok) {
                    const errorData = await postResponse.json();
                    throw new Error(errorData.title || 'Failed to create category');
                }

                const createdCategory = await postResponse.json();

                Swal.fire({
                    icon: 'success',
                    title: 'Category Created',
                    text: 'Category created successfully: ' + createdCategory.categoryName,
                    timer: 2000,
                    showConfirmButton: false
                });

                document.getElementById("categoryName").value = '';

            } catch (error) {
                console.error('Error:', error.message);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message
                });
            }
        });

        async function fetchTickets() {
            try {
                const response = await fetch('/api/Admin/tickets');

                // Check if the response is successful
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                // Parse the JSON response
                const tickets = await response.json();

                // Get the table body element
                const tableBody = document.getElementById('tickets-table-body');
                tableBody.innerHTML = ''; // Clear existing rows

                // Populate the table with ticket data
                tickets.forEach(ticket => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${ticket.ticketID}</td>
                        <td>${ticket.attendeeName}</td>
                        <td>${ticket.attendeeEmail}</td>
                        <td>${ticket.ticketCode}</td>
                        <td>${ticket.eventName}</td>
                        <td>${ticket.bookingDate.split('T')[0]}</td>
                        <td>${ticket.ticketStatus}</td>
                        <td>
                            <button class="btn btn-danger btn-sm" onclick="confirmDeleteTicket(${ticket.ticketID})">
                                <i class="fas fa-trash-alt"></i> Delete
                            </button>
                        </td>
                    `;
                    tableBody.appendChild(row);
                });
            } catch (error) {
                console.error('Error fetching tickets:', error);
                // Optionally display an error message to the user
                const tableBody = document.getElementById('tickets-table-body');
                tableBody.innerHTML = '<tr><td colspan="8">Failed to load tickets. Please try again later.</td></tr>';
            }
        }

        function renderPagination(totalPages, currentPage) {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';

            // Previous button
            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `<a class="page-link" href="#" onclick="FetchPreviousUsers()">Previous</a>`;
            pagination.appendChild(prevLi);

            // Page numbers
            for (let i = 1; i <= totalPages; i++) {
                const li = document.createElement('li');
                li.className = `page-item ${i === currentPage ? 'active' : ''}`;
                li.innerHTML = `<a class="page-link" href="#" onclick="fetchUsers(${i})">${i}</a>`;
                pagination.appendChild(li);
            }

            // Next button
            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
            nextLi.innerHTML = `<a class="page-link" href="#" onclick="FetchNextUsers()">Next</a>`;
            pagination.appendChild(nextLi);
        }

        async function getEvents() {
            const search = document.getElementById("searchEvents").value;

            fetch(`/api/admin/events/?name=${search}`)
                .then(response => {
                    console.log(response)
                    if (!response.ok) {
                        throw new Error('Network response was not OK');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log(data);

                    const tableBody = document.getElementById("events-table-body");
                    tableBody.innerHTML = '';

                    data.forEach(event => {
                        const row = document.createElement("tr");
                        row.innerHTML = `
                            <td>${event.eventID}</td>
                            <td>${event.eventName}</td>
                            <td>${event.organizationName}</td>
                            <td>${event.categoryName}</td>
                            <td>${event.eventDate}</td>
                            <td>
                                <a href='/Admin/ViewEvent/?id=${event.eventID}' class="btn btn-primary btn"><i class="fas fa-eye"></i> View</a>
                                <a href='/Admin/EditEvent/?id=${event.eventID}' class="btn btn-secondary btn"><i class="fas fa-edit"></i> Edit</a>
                                <button class="btn btn-danger btn" onclick="confirmDeleteEvent(${event.eventID})">
                                    <i class="fas fa-trash-alt"></i> Delete
                                </button>
                            </td>
                        `;
                        tableBody.appendChild(row);
                    });
                })
                .catch(error => {
                    console.error('Fetch error:', error);
                });
        }
        document.getElementById("searchEventsBtn").addEventListener("click", getEvents);

        let currentDeleteUserId = null;
        let currentDeleteCategoryId = null;
        let currentDeleteEventId = null;
        let currentDeleteTicketId = null;

        // Show/hide sections
        function showSection(section) {
            // Hide all sections first
            document.getElementById('dashboard-section').style.display = 'none';
            document.getElementById('allUsers-section').style.display = 'none';
            document.getElementById('viewCategories-section').style.display = 'none';
            document.getElementById('addCategory-section').style.display = 'none';
            document.getElementById('allEvents-section').style.display = 'none';
            document.getElementById('pendingEvents-section').style.display = 'none';
            document.getElementById('allTickets-section').style.display = 'none';

            // Show the requested section only
            if (section === 'dashboard') {
                document.getElementById('dashboard-section').style.display = 'block';
                DashBoard_Data();
            } else if (section === 'allUsers') {
                document.getElementById('allUsers-section').style.display = 'block';
                fetchUsers(1, pageLimit);
            } else if (section === 'viewCategories') {
                document.getElementById('viewCategories-section').style.display = 'block';
                getEventCategories();
            } else if (section === 'addCategory') {
                document.getElementById('addCategory-section').style.display = 'block';
            } else if (section === 'allEvents') {
                document.getElementById('allEvents-section').style.display = 'block';
                getEvents();
            } else if (section === 'pendingEvents') {
                document.getElementById('pendingEvents-section').style.display = 'block';
            } else if (section === 'allTickets') {
                document.getElementById('allTickets-section').style.display = 'block';
                fetchTickets();
            }
        }

        // Toggle dropdown menus
        function toggleDropdown(dropdownId) {
            var dropdown = document.getElementById(dropdownId);
            dropdown.classList.toggle("d-none");
        }

        // Confirmation dialogs for deletion
        function confirmDeleteUser(id) {
            currentDeleteUserId = id;
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    deleteUser();
                }
            });
        }

        function confirmDeleteCategory(id) {
            currentDeleteCategoryId = id;
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    deleteCategory();
                }
            });
        }

        function confirmDeleteEvent(id) {
            currentDeleteEventId = id;
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    deleteEvent();
                }
            });
        }

        function confirmDeleteTicket(id) {
            currentDeleteTicketId = id;
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    deleteTicket();
                }
            });
        }

        // Delete functions
        async function deleteUser() {
            try {
                const response = await fetch(`/Api/Admin/Users/${currentDeleteUserId}`, {
                    method: 'DELETE'
                });

                if (response.status === 404) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'User not found.'
                    });
                    return;
                }

                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Deleted!',
                        text: 'User has been deleted.',
                        timer: 2000,
                        showConfirmButton: false
                    });
                    fetchUsers();
                } else {
                    throw new Error('Failed to delete user');
                }
            } catch (error) {
                console.error('Error deleting user:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to delete user.'
                });
            }
        }

        async function deleteCategory() {
            try {
                const response = await fetch(`/Api/Admin/categories/${currentDeleteCategoryId}`, {
                    method: 'DELETE'
                });

                if (response.status === 404) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Category not found.'
                    });
                    return;
                }

                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Deleted!',
                        text: 'Category has been deleted.',
                        timer: 2000,
                        showConfirmButton: false
                    });
                    getEventCategories();
                } else {
                    throw new Error('Failed to delete category');
                }
            } catch (error) {
                console.error('Error deleting category:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to delete category.'
                });
            }
        }

        async function deleteEvent() {
            try {
                const response = await fetch(`/Api/Admin/events/${currentDeleteEventId}`, {
                    method: 'DELETE'
                });

                if (response.status === 404) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Event not found.'
                    });
                    return;
                }

                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Deleted!',
                        text: 'Event has been deleted.',
                        timer: 2000,
                        showConfirmButton: false
                    });
                    getEvents();
                } else {
                    throw new Error('Failed to delete event');
                }
            } catch (error) {
                console.error('Error deleting event:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to delete event.'
                });
            }
        }

        async function deleteTicket() {
            try {
                const response = await fetch(`/Api/Admin/tickets/${currentDeleteTicketId}`, {
                    method: 'DELETE'
                });

                if (response.status === 404) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Ticket not found.'
                    });
                    return;
                }

                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Deleted!',
                        text: 'Ticket has been deleted.',
                        timer: 2000,
                        showConfirmButton: false
                    });
                    fetchTickets();
                } else {
                    throw new Error('Failed to delete ticket');
                }
            } catch (error) {
                console.error('Error deleting Ticket:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to delete ticket.'
                });
            }
        }

        function submitAddAdmin() {
            const name = document.getElementById('adminName').value;
            const email = document.getElementById('adminEmail').value;
            const password = document.getElementById('adminPassword').value;
            fetch('/Admin/AddAdmin', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `name=${encodeURIComponent(name)}&email=${encodeURIComponent(email)}&password=${encodeURIComponent(password)}`
            })
            .then(res => {
                if (res.ok) {
                    Swal.fire('Success', 'Admin added successfully!', 'success');
                    document.getElementById('addAdminForm').reset();
                    var modal = bootstrap.Modal.getInstance(document.getElementById('addAdminModal'));
                    modal.hide();
                } else {
                    res.text().then(msg => Swal.fire('Error', msg, 'error'));
                }
            });
        }
        function submitAddUser() {
            const name = document.getElementById('userName').value;
            const email = document.getElementById('userEmail').value;
            const password = document.getElementById('userPassword').value;
            fetch('/Admin/AddUser', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `name=${encodeURIComponent(name)}&email=${encodeURIComponent(email)}&password=${encodeURIComponent(password)}`
            })
            .then(res => {
                if (res.ok) {
                    Swal.fire('Success', 'User added successfully!', 'success');
                    document.getElementById('addUserForm').reset();
                    var modal = bootstrap.Modal.getInstance(document.getElementById('addUserModal'));
                    modal.hide();
                } else {
                    res.text().then(msg => Swal.fire('Error', msg, 'error'));
                }
            });
        }
        function submitAddOrganizer() {
            const name = document.getElementById('organizerName').value;
            const email = document.getElementById('organizerEmail').value;
            const password = document.getElementById('organizerPassword').value;
            fetch('/Admin/AddOrganizer', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `name=${encodeURIComponent(name)}&email=${encodeURIComponent(email)}&password=${encodeURIComponent(password)}`
            })
            .then(res => {
                if (res.ok) {
                    Swal.fire('Success', 'Organizer added successfully!', 'success');
                    document.getElementById('addOrganizerForm').reset();
                    var modal = bootstrap.Modal.getInstance(document.getElementById('addOrganizerModal'));
                    modal.hide();
                } else {
                    res.text().then(msg => Swal.fire('Error', msg, 'error'));
                }
            });
        }
    </script>
    <!-- Add Admin Modal -->
    <div class="modal fade" id="addAdminModal" tabindex="-1" aria-labelledby="addAdminModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="addAdminModalLabel">Add Admin</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="addAdminForm">
              <div class="mb-3">
                <label for="adminName" class="form-label">Name</label>
                <input type="text" class="form-control" id="adminName" required>
              </div>
              <div class="mb-3">
                <label for="adminEmail" class="form-label">Email</label>
                <input type="email" class="form-control" id="adminEmail" required>
              </div>
              <div class="mb-3">
                <label for="adminPassword" class="form-label">Password</label>
                <input type="password" class="form-control" id="adminPassword" required>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="button" class="btn btn-pink" onclick="submitAddAdmin()">Add Admin</button>
          </div>
        </div>
      </div>
    </div>
    <!-- Add User Modal -->
    <div class="modal fade" id="addUserModal" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="addUserModalLabel">Add User</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="addUserForm">
              <div class="mb-3">
                <label for="userName" class="form-label">Name</label>
                <input type="text" class="form-control" id="userName" required>
              </div>
              <div class="mb-3">
                <label for="userEmail" class="form-label">Email</label>
                <input type="email" class="form-control" id="userEmail" required>
              </div>
              <div class="mb-3">
                <label for="userPassword" class="form-label">Password</label>
                <input type="password" class="form-control" id="userPassword" required>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="button" class="btn btn-secondary" onclick="submitAddUser()">Add User</button>
          </div>
        </div>
      </div>
    </div>
    <!-- Add Organizer Modal -->
    <div class="modal fade" id="addOrganizerModal" tabindex="-1" aria-labelledby="addOrganizerModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="addOrganizerModalLabel">Add Organizer</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="addOrganizerForm">
              <div class="mb-3">
                <label for="organizerName" class="form-label">Name</label>
                <input type="text" class="form-control" id="organizerName" required>
              </div>
              <div class="mb-3">
                <label for="organizerEmail" class="form-label">Email</label>
                <input type="email" class="form-control" id="organizerEmail" required>
              </div>
              <div class="mb-3">
                <label for="organizerPassword" class="form-label">Password</label>
                <input type="password" class="form-control" id="organizerPassword" required>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="button" class="btn btn-info text-white" onclick="submitAddOrganizer()">Add Organizer</button>
          </div>
        </div>
      </div>
    </div>
    </body>
</html>