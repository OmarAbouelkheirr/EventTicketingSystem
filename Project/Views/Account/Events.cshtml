@using EventBookingSystem.Models
@model List<Event>
@{

    Layout = "_HomePageLayout";
    Person? person = ViewBag.Person as Person;
    List<EventCategory>? categories = ViewBag.Categories as List<EventCategory>;
}
<html>
    <head>

    </head>
<body>

   <div class="container">

        <!-- Search Bar -->
        <div class="card shadow-sm mb-4">
            <div class="card-body">
                <h5 class="card-title mb-3">Search Events</h5>
                <div class="row g-3 align-items-end">
                    <!-- Name Search -->
                    <div class="col-md-4">
                        <label for="nameSearch" class="form-label">Search by Name</label>
                        <input type="text" id="nameSearch" class="form-control" placeholder="Enter event name">
                        <button class="btn btn-pink mt-2 w-100" id="nameSearchBtn">Search Name</button>
                    </div>

                    <!-- Category Search -->
                    <div class="col-md-4">
                        <label for="categorySearch" class="form-label">Search by Category</label>
                        <select  id="categorySearch" class="form-control" placeholder="Enter category">
                            @foreach(var x in categories)
                            {
                            <option valie = "@x.CategoryName">@x.CategoryName</option>
                            }
                            </select>
                        <button class="btn btn-pink mt-2 w-100" id="categorySearchBtn">Search Category</button>
                    </div>

                    <!-- Date Search -->
                    <div class="col-md-4">
                        <label for="dateSearch" class="form-label">Search by Date</label>
                        <input type="date" id="dateSearch" class="form-control">
                        <button class="btn btn-pink mt-2 w-100" id="dateSearchBtn">Search Date</button>
                    </div>

                    <!-- Clear Button -->
                    <div class="col-12 mt-3">
                        <button type="button" class="btn btn-outline-secondary w-100" onclick="clearFilters()">Clear Filters</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Event Cards Section -->
        <div class="row g-4">

                 @foreach( var  x in Model)
                 {
                     
    bool isUpcoming = x.EventDate > DateTime.Now;


<div class="col-md-6 col-lg-4 Evnets" data-name="@x.EventName" data-category="@x.Category.CategoryName" data-date="@x.EventDate">
    <div class="card event-card h-100 position-relative">

        <img src="/event-images/@x.Image" class="card-img-top" alt="Event Image">

        <div class="card-body d-flex flex-column">
            <h5 class="card-title">@x.EventName</h5>
            <div class="card-text mb-3 flex-grow-1">
                <span><i class="fas fa-calendar-alt"></i> @x.EventDate</span>
                <span><i class="fas fa-tag"></i> @x.Category.CategoryName</span>
                <span><i class="fas fa-ticket-alt"></i> @x.MaxAttendees </span>
            </div>
                                                    @if (person?.Role != null)
                                        {
                                            var role = person.Role;
                                            switch(role)
                                            {
                                                case "Organizer":
                                            <a asp-controller="Organiser" asp-action="ViewEvent" asp-route-id="@x.EventID" class="btn btn-pink mt-auto align-self-start">View Details</a>
                                                    break;
                                                    case "Admin":
                                                    <a asp-controller="Admin" asp-action="ViewEvent" asp-route-id="@x.EventID" class="btn btn-pink mt-auto align-self-start">View Details</a>
                                                    break;
                                                case "Attendee":
                                                    <a asp-controller="Attendee" asp-action="ViewEvent" asp-route-id="@x.EventID" class="btn btn-pink mt-auto align-self-start">View Details</a>
                                                    break;
                                            }
                                        }
        </div>

        <!-- Status Badge in Bottom-Right Corner with Small Margin -->
        <div class="position-absolute bottom-0 end-0 mb-2 me-2 text-danger text-end">
            @if (isUpcoming)
            {
                <div>
                    <i class="fas fa-clock fa-2x"></i><br />
                    <small><strong>Upcoming</strong></small>
                </div>
            }
            else
            {
                <div>
                    <i class="fas fa-times-circle fa-2x"></i><br />
                    <small><strong>Ended</strong></small>
                </div>
            }
        </div>

    </div>
</div>


                }


        </div>
    </div>

    <div class="text-center mb-4">
        <a class="btn btn-pink btn-lg fw-bold mt-5" asp-action="HomePage">Home Page</a>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const nameInput = document.getElementById('nameSearch');
        const categoryInput = document.getElementById('categorySearch');
        const dateInput = document.getElementById('dateSearch');

        const nameBtn = document.getElementById('nameSearchBtn');
        const categoryBtn = document.getElementById('categorySearchBtn');
        const dateBtn = document.getElementById('dateSearchBtn');

        const cards = document.querySelectorAll('.Evnets'); // typo? should be '.Events'

        function resetInputs(except) {
            [nameInput, categoryInput, dateInput].forEach(input => {
                if (input !== except) {
                    input.value = "";
                    input.disabled = true;
                }
            });
        }

        function enableAllInputs() {
            nameInput.disabled = false;
            categoryInput.disabled = false;
            dateInput.disabled = false;
        }

        function filterCards(filterType) {
            let nameQuery = nameInput.value.toLowerCase();
            let categoryQuery = categoryInput.value.toLowerCase();
            let dateQuery = dateInput.value ? new Date(dateInput.value) : null;

            cards.forEach(card => {
                const cardName = card.getAttribute('data-name').toLowerCase();
                const cardCategory = card.getAttribute('data-category').toLowerCase();
                const cardDate = new Date(card.getAttribute('data-date'));

                let match = false;

                if (filterType === "name") {
                    match = cardName.includes(nameQuery);
                } else if (filterType === "category") {
                    match = cardCategory.includes(categoryQuery);
                } else if (filterType === "date") {
                    match = dateQuery && cardDate >= dateQuery;
                }

                card.style.display = match ? 'block' : 'none';
            });
        }

        nameBtn.addEventListener('click', () => {
            resetInputs(nameInput);
            filterCards("name");
        });

        categoryBtn.addEventListener('click', () => {
            resetInputs(categoryInput);
            filterCards("category");
        });

        dateBtn.addEventListener('click', () => {
            resetInputs(dateInput);
            filterCards("date");
        });

        function clearFilters() {
            enableAllInputs();
            nameInput.value = "";
            categoryInput.value = "";
            dateInput.value = "";
            cards.forEach(card => card.style.display = 'block');
        }
    </script>

</body>
</html>
